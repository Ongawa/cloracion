/**
 * This class is generated by jOOQ
 */
package org.ongawa.peru.chlorination.persistence.db.jooq.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;
import org.ongawa.peru.chlorination.persistence.db.jooq.Keys;
import org.ongawa.peru.chlorination.persistence.db.jooq.Public;
import org.ongawa.peru.chlorination.persistence.db.jooq.tables.records.WaterspringRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.7.2"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Waterspring extends TableImpl<WaterspringRecord> {

	private static final long serialVersionUID = 1146856813;

	/**
	 * The reference instance of <code>PUBLIC.WATERSPRING</code>
	 */
	public static final Waterspring WATERSPRING = new Waterspring();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<WaterspringRecord> getRecordType() {
		return WaterspringRecord.class;
	}

	/**
	 * The column <code>PUBLIC.WATERSPRING.IDWATERSPRING</code>.
	 */
	public final TableField<WaterspringRecord, Integer> IDWATERSPRING = createField("IDWATERSPRING", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaulted(true), this, "");

	/**
	 * The column <code>PUBLIC.WATERSPRING.NAME</code>.
	 */
	public final TableField<WaterspringRecord, String> NAME = createField("NAME", org.jooq.impl.SQLDataType.VARCHAR.length(100).nullable(false), this, "");

	/**
	 * Create a <code>PUBLIC.WATERSPRING</code> table reference
	 */
	public Waterspring() {
		this("WATERSPRING", null);
	}

	/**
	 * Create an aliased <code>PUBLIC.WATERSPRING</code> table reference
	 */
	public Waterspring(String alias) {
		this(alias, WATERSPRING);
	}

	private Waterspring(String alias, Table<WaterspringRecord> aliased) {
		this(alias, aliased, null);
	}

	private Waterspring(String alias, Table<WaterspringRecord> aliased, Field<?>[] parameters) {
		super(alias, Public.PUBLIC, aliased, parameters, "");
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Identity<WaterspringRecord, Integer> getIdentity() {
		return Keys.IDENTITY_WATERSPRING;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public UniqueKey<WaterspringRecord> getPrimaryKey() {
		return Keys.CONSTRAINT_CA;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<UniqueKey<WaterspringRecord>> getKeys() {
		return Arrays.<UniqueKey<WaterspringRecord>>asList(Keys.CONSTRAINT_CA);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Waterspring as(String alias) {
		return new Waterspring(alias, this);
	}

	/**
	 * Rename this table
	 */
	public Waterspring rename(String name) {
		return new Waterspring(name, null);
	}
}
