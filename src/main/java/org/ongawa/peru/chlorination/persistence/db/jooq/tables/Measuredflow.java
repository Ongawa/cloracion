/**
 * This class is generated by jOOQ
 */
package org.ongawa.peru.chlorination.persistence.db.jooq.tables;


import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;
import org.ongawa.peru.chlorination.persistence.db.jooq.Keys;
import org.ongawa.peru.chlorination.persistence.db.jooq.Public;
import org.ongawa.peru.chlorination.persistence.db.jooq.tables.records.MeasuredflowRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.7.2"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Measuredflow extends TableImpl<MeasuredflowRecord> {

	private static final long serialVersionUID = -1625448184;

	/**
	 * The reference instance of <code>PUBLIC.MEASUREDFLOW</code>
	 */
	public static final Measuredflow MEASUREDFLOW = new Measuredflow();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<MeasuredflowRecord> getRecordType() {
		return MeasuredflowRecord.class;
	}

	/**
	 * The column <code>PUBLIC.MEASUREDFLOW.DATE</code>.
	 */
	public final TableField<MeasuredflowRecord, Timestamp> DATE = createField("DATE", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

	/**
	 * The column <code>PUBLIC.MEASUREDFLOW.MEASURINGPOINT_IDMEASURINGPOINT</code>.
	 */
	public final TableField<MeasuredflowRecord, Integer> MEASURINGPOINT_IDMEASURINGPOINT = createField("MEASURINGPOINT_IDMEASURINGPOINT", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

	/**
	 * The column <code>PUBLIC.MEASUREDFLOW.MEASURINGPOINT_WATERSYSTEM_HAS_WATERSPRING_WATERSYSTEM_IDWATERSYSTEM</code>.
	 */
	public final TableField<MeasuredflowRecord, Integer> MEASURINGPOINT_WATERSYSTEM_HAS_WATERSPRING_WATERSYSTEM_IDWATERSYSTEM = createField("MEASURINGPOINT_WATERSYSTEM_HAS_WATERSPRING_WATERSYSTEM_IDWATERSYSTEM", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

	/**
	 * The column <code>PUBLIC.MEASUREDFLOW.MEASURINGPOINT_WATERSYSTEM_HAS_WATERSPRING_WATERSYSTEM_COMMUNITY_IDCOMMUNITY</code>.
	 */
	public final TableField<MeasuredflowRecord, Integer> MEASURINGPOINT_WATERSYSTEM_HAS_WATERSPRING_WATERSYSTEM_COMMUNITY_IDCOMMUNITY = createField("MEASURINGPOINT_WATERSYSTEM_HAS_WATERSPRING_WATERSYSTEM_COMMUNITY_IDCOMMUNITY", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

	/**
	 * The column <code>PUBLIC.MEASUREDFLOW.MEASURINGPOINT_WATERSYSTEM_HAS_WATERSPRING_WATERSYSTEM_COMMUNITY_SUBBASIN_IDSUBBASIN</code>.
	 */
	public final TableField<MeasuredflowRecord, Integer> MEASURINGPOINT_WATERSYSTEM_HAS_WATERSPRING_WATERSYSTEM_COMMUNITY_SUBBASIN_IDSUBBASIN = createField("MEASURINGPOINT_WATERSYSTEM_HAS_WATERSPRING_WATERSYSTEM_COMMUNITY_SUBBASIN_IDSUBBASIN", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

	/**
	 * The column <code>PUBLIC.MEASUREDFLOW.MEASURINGPOINT_WATERSYSTEM_HAS_WATERSPRING_WATERSPRING_IDWATERSPRING</code>.
	 */
	public final TableField<MeasuredflowRecord, Integer> MEASURINGPOINT_WATERSYSTEM_HAS_WATERSPRING_WATERSPRING_IDWATERSPRING = createField("MEASURINGPOINT_WATERSYSTEM_HAS_WATERSPRING_WATERSPRING_IDWATERSPRING", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

	/**
	 * The column <code>PUBLIC.MEASUREDFLOW.FLOW</code>.
	 */
	public final TableField<MeasuredflowRecord, Byte> FLOW = createField("FLOW", org.jooq.impl.SQLDataType.TINYINT.nullable(false), this, "");

	/**
	 * The column <code>PUBLIC.MEASUREDFLOW.COMMENTS</code>.
	 */
	public final TableField<MeasuredflowRecord, String> COMMENTS = createField("COMMENTS", org.jooq.impl.SQLDataType.VARCHAR.length(255), this, "");

	/**
	 * Create a <code>PUBLIC.MEASUREDFLOW</code> table reference
	 */
	public Measuredflow() {
		this("MEASUREDFLOW", null);
	}

	/**
	 * Create an aliased <code>PUBLIC.MEASUREDFLOW</code> table reference
	 */
	public Measuredflow(String alias) {
		this(alias, MEASUREDFLOW);
	}

	private Measuredflow(String alias, Table<MeasuredflowRecord> aliased) {
		this(alias, aliased, null);
	}

	private Measuredflow(String alias, Table<MeasuredflowRecord> aliased, Field<?>[] parameters) {
		super(alias, Public.PUBLIC, aliased, parameters, "");
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public UniqueKey<MeasuredflowRecord> getPrimaryKey() {
		return Keys.CONSTRAINT_7;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<UniqueKey<MeasuredflowRecord>> getKeys() {
		return Arrays.<UniqueKey<MeasuredflowRecord>>asList(Keys.CONSTRAINT_7);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<ForeignKey<MeasuredflowRecord, ?>> getReferences() {
		return Arrays.<ForeignKey<MeasuredflowRecord, ?>>asList(Keys.FK_MEASUREDFLOW_MEASURINGPOINT1);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Measuredflow as(String alias) {
		return new Measuredflow(alias, this);
	}

	/**
	 * Rename this table
	 */
	public Measuredflow rename(String name) {
		return new Measuredflow(name, null);
	}
}
